import os
import sqlite3
import datetime
import logging
import subprocess
import qrcode
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    Application, ContextTypes, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters
)
from threading import Thread
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB = "autowgshop.db"
ADMIN_IDS = [1203425573]
CRYPTO_WALLET = "–û–∂–∏–¥–∞–π—Ç–µ —è —Å–∫–æ—Ä–æ –ø—Ä–∏–º—É –≤–∞—Å"
PRICE = 5
WG_INTERFACE = "wg0"
WG_SUBNET = "10.8.0"
SERVER_PUBLIC_KEY = "7hdEHuQ+4iW8PRDWmi19IHInhOFL/Y7cHPNEwcvHMSA="
SERVER_ENDPOINT = "80.74.28.21:51820"

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
def db_init():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        is_admin INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS subs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        config_name TEXT,
        ip_last_octet INTEGER,
        start_date DATE,
        end_date DATE,
        public_key TEXT,
        private_key TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        wallet TEXT,
        amount REAL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT,
        config_name TEXT
    )''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def db_user_add(user_id, username, is_admin=False):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (id, username, is_admin) VALUES (?, ?, ?)",
              (user_id, username, int(is_admin)))
    conn.commit()
    conn.close()

def db_payment_add(user_id, wallet, amount):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("INSERT INTO payments (user_id, wallet, amount, status) VALUES (?, ?, ?, 'pending')",
              (user_id, wallet, amount))
    pid = c.lastrowid
    conn.commit()
    conn.close()
    return pid

def db_payment_set_status(payment_id, status, config_name=None):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    if config_name:
        c.execute("UPDATE payments SET status=?, config_name=? WHERE id=?",
                  (status, config_name, payment_id))
    else:
        c.execute("UPDATE payments SET status=? WHERE id=?", (status, payment_id))
    conn.commit()
    conn.close()

def db_get_pending_payments():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id, user_id, amount FROM payments WHERE status='pending'")
    rows = c.fetchall()
    conn.close()
    return rows

def db_get_payment(payment_id):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT user_id, amount FROM payments WHERE id=?", (payment_id,))
    row = c.fetchone()
    conn.close()
    return row

def db_sub_add(user_id, config_name, public_key, private_key, days=30):
    now = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id, ip_last_octet, end_date FROM subs WHERE user_id=? AND config_name=?",
              (user_id, config_name))
    row = c.fetchone()
    if row:
        sid, octet, prev = row
        prev_date = datetime.datetime.strptime(prev, "%Y-%m-%d").date() if prev else now
        start = max(now, prev_date)
        end = start + datetime.timedelta(days=days)
        c.execute("UPDATE subs SET end_date=? WHERE id=?", (end, sid))
        conn.commit()
        conn.close()
        return octet, end, False
    c.execute("SELECT MAX(ip_last_octet) FROM subs")
    last = c.fetchone()[0] or 1
    octet = last + 1
    end = now + datetime.timedelta(days=int(days))
    c.execute(
        "INSERT INTO subs (user_id, config_name, ip_last_octet, start_date, end_date, public_key, private_key) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user_id, config_name, octet, now, end, public_key, private_key)
    )
    conn.commit()
    conn.close()
    return octet, end, True

def db_user_configs(user_id):
    today = datetime.date.today().isoformat()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT config_name, ip_last_octet, end_date, private_key FROM subs WHERE user_id=? AND end_date>=?",
              (user_id, today))
    rows = c.fetchall()
    conn.close()
    return rows

def db_get_peer_by_public_key(public_key):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT user_id, config_name, ip_last_octet, end_date, private_key FROM subs WHERE public_key=?",
              (public_key,))
    row = c.fetchone()
    conn.close()
    return row

def db_get_expired_peers():
    today = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT public_key FROM subs WHERE end_date < ?", (today,))
    keys = [r[0] for r in c.fetchall()]
    conn.close()
    return keys

def db_get_active_peers():
    today = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT public_key FROM subs WHERE end_date >= ?", (today,))
    keys = [r[0] for r in c.fetchall()]
    conn.close()
    return keys

def generate_keys():
    priv = subprocess.getoutput("wg genkey")
    pub = subprocess.getoutput(f"echo '{priv}' | wg pubkey")
    return priv, pub

def add_peer_to_wg(public_key, ip_octet,):
    cmd = ["docker", "exec", "wg-easy", "wg", "set", WG_INTERFACE,
           "peer", public_key, "allowed-ips", f"{WG_SUBNET}.{ip_octet}/32"]
    subprocess.run(cmd, check=True)

def remove_peer_from_wg(public_key):
    cmd = ["docker", "exec", "wg-easy", "wg", "set", WG_INTERFACE,
           "peer", public_key, "remove"]
    subprocess.run(cmd, check=True)

def generate_client_config(private_key, ip_octet,):
    return f"""[Interface]
PrivateKey = {private_key}
Address = {WG_SUBNET}.{ip_octet}/32
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_ENDPOINT}
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
"""

def generate_qr(text, path):
    qrcode.make(text).save(path)

def get_main_keyboard(user_id):
    kb = [[KeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton("üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏")],
          [KeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]]
    if user_id in ADMIN_IDS:
        kb.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user_add(user.id, user.username)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Shop!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(user.id)
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    db_user_add(user.id, user.username)

    if text == "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        pid = db_payment_add(user.id, CRYPTO_WALLET, PRICE)
        for admin in ADMIN_IDS:
            await context.bot.send_message(
                admin,
                f"–ó–∞—è–≤–∫–∞ #{pid} –æ—Ç @{user.username} ({user.id}) –Ω–∞ {PRICE} USDT",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∏ –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"approve_{pid}")]]
                )
            )
        await update.message.reply_text(
            f"–ü–µ—Ä–µ–≤–µ–¥–∏ <b>{PRICE} USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>{CRYPTO_WALLET}</code>\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode="HTML"
        )

    elif text == "üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏":
        configs = db_user_configs(user.id)
        if not configs:
            return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤.", reply_markup=get_main_keyboard(user.id))
        
        for name, octet, end, priv, in configs:
            conf = generate_client_config(priv, octet)
            cfile = f"{user.id}_{name}.conf"
            qfile = f"{user.id}_{name}.png"
    
            with open(cfile, "w", encoding="utf-8") as f_conf:
                f_conf.write(conf)
    
            generate_qr(conf, qfile)
    
            try:
                with open(cfile, "rb") as f:
                    await context.bot.send_document(
                        chat_id=user.id,
                        document=InputFile(f, filename=f"{name}.conf"),
                        caption=f"{name} –¥–æ {end}"
                    )
                with open(qfile, "rb") as f:
                    await context.bot.send_photo(
                        chat_id=user.id,
                        photo=InputFile(f, filename=f"{name}.png"),
                        caption="QR-–∫–æ–¥"
                    )
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            finally:
                if os.path.exists(cfile): os.remove(cfile)
                if os.path.exists(qfile): os.remove(qfile)

   ```python
    elif text == "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
            await update.message.reply_text(
                "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN –¥–ª—è –æ—Å–æ–±–æ –±–µ–∑–Ω–∞–¥—ë–∂–Ω—ã—Ö**\n"
                "*(–î–∞, —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è, —Ç—É–ø–æ—Ä—ã–ª—ã–π —á–∞–π–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–∂–µ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –≥–∞–π–¥–æ–º —É–º—É–¥—Ä—è–µ—Ç—Å—è –≤—Å—ë –∑–∞–ø–æ—Ä–æ—Ç—å. –ß–∏—Ç–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –∏–ª–∏ –∏–¥–∏ –≤ –∂–æ–ø—É.)*\n\n"
                
                "---\n\n"
                
                "**üîπ –®–∞–≥ 1: –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (—ç—Ç–æ –Ω–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞, –¥–µ–±–∏–ª)**\n"
                "1. **–ñ–º–∏** –Ω–∞ –∫–Ω–æ–ø–∫—É *¬´üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª* (–µ—Å–ª–∏ —Ç–≤–æ–∏ –≤—ã—Ä–≤–∏–≥–ª–∞–∑–Ω—ã–µ –∫—É—Ä–∏–Ω—ã–µ –ø–∞–ª—å—Ü—ã –µ—â—ë —Å–ø–æ—Å–æ–±–Ω—ã –Ω–∞ —Ç–∞–∫–æ–µ).\n"
                "2. **–ù–µ —Å–ø–∞–º—å** –∞–¥–º–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ *¬´—á—ë –ø–æ –¥–µ–Ω—å–≥–∞–º?¬ª* –∏–ª–∏ *¬´–≥–¥–µ –º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞?¬ª*. –ï—Å–ª–∏ –±–æ—Ç –º–æ–ª—á–∏—Ç ‚Äî –∑–Ω–∞—á–∏—Ç, —Ç–≤–æ–∏ –≥—Ä–æ—à–∏ –µ—â—ë –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–ª–∏.\n"
                "3. **–ù–µ –Ω–æ–π**, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç —Å—Ä–∞–∑—É. –ê–¥–º–∏–Ω ‚Äî –Ω–µ ChatGPT, –µ–º—É —Ç–æ–∂–µ –Ω–∞–¥–æ –ø–æ—Å–ø–∞—Ç—å, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–µ–±—è, –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ –¥–æ–ª–±–æ—ë–±–∞.\n\n"
                
                "---\n\n"
                
                "**üîπ –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ (–Ω–µ—Ç, —ç—Ç–æ –Ω–µ —Ä–∏—Ç—É–∞–ª —á—ë—Ä–Ω–æ–π –º–∞–≥–∏–∏)**\n"
                "**üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:**\n"
                "- **Android:**\n"
                "  - –¢—ã–∫–∞–µ—à—å –≤ —Ñ–∞–π–ª ‚Üí *¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª* (–¥–∞, –≤–æ—Ç –ø—Ä—è–º–æ —Ç–∞–∫, –±–µ–∑ —Ç–∞–Ω—Ü–µ–≤ —Å –±—É–±–Ω–æ–º).\n"
                "  - –ï—Å–ª–∏ –Ω–µ –∫–∞—á–∞–µ—Ç—Å—è ‚Äî **–¥–∞–π Telegram –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º**, –∫—Ä–µ—Ç–∏–Ω. –ò–ª–∏ —Ç—ã –¥—É–º–∞–ª, —á—Ç–æ —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω —É–º–µ–µ—Ç —Ç–µ–ª–µ–ø–∞—Ç–∏—é?\n"
                "- **iPhone:**\n"
                "  - –¢—ã–∫–∞–µ—à—å –≤ —Ñ–∞–π–ª ‚Üí *¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª* ‚Üí *¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª—ã¬ª* (–Ω–µ—Ç, iCloud ‚Äî —ç—Ç–æ –Ω–µ –≤–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞, —Ç—É–ø–æ–π —Ñ—Ä—É–∫—Ç–æ–≤–æ–¥).\n\n"
                
                "**üíª –ù–∞ –∫–æ–º–ø–µ:**\n"
                "- **Windows:**\n"
                "  - –ü—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π ‚Üí *¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫¬ª* ‚Üí –≤—ã–±–∏—Ä–∞–µ—à—å –ø–∞–ø–∫—É (–Ω–µ—Ç, ¬´–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª¬ª ‚Äî –Ω–µ –∞—Ä—Ö–∏–≤, –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç).\n"
                "- **Mac:**\n"
                "  - –¢—ã–∫–∞–µ—à—å *¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª* ‚Üí –≤—ã–±–∏—Ä–∞–µ—à—å –º–µ—Å—Ç–æ (–¥–∞, ¬´–î–æ–∫—É–º–µ–Ω—Ç—ã¬ª ‚Äî –Ω–µ –¥–ª—è –ø–æ—Ä–Ω—É—Ö–∏, –∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤, –∏–¥–∏–æ—Ç).\n\n"
                
                "---\n\n"
                
                "**üîπ –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard (–Ω–µ—Ç, —ç—Ç–æ –Ω–µ –≤–∏—Ä—É—Å, –¥–µ–±–∏–ª–æ–∏–¥)**\n"
                "**üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:**\n"
                "- **Android:** –ö–∞—á–∞–µ—à—å —Å [Google Play](https://play.google.com/store/apps/details?id=com.wireguard.android) (–Ω–µ—Ç, –Ω–µ —Å ¬´–ª–µ–≤–æ–≥–æ¬ª —Å–∞–π—Ç–∞, –≥–¥–µ —Ç–µ–±–µ –µ—â—ë –∏ —Ç—Ä–æ—è–Ω –ø–æ–¥—Å—É–Ω—É—Ç).\n"
                "- **iPhone:** –ö–∞—á–∞–µ—à—å —Å [App Store](https://apps.apple.com/us/app/wireguard/id1441195209) (–¥–∞, –∏–º–µ–Ω–Ω–æ –æ—Ç—Ç—É–¥–∞, –∞ –Ω–µ –∏–∑ Cydia, –ø–∏—Ä–∞—Ç—Å–∫–∏–π —É–±–ª—é–¥–æ–∫).\n\n"
                
                "**üíª –ù–∞ –∫–æ–º–ø–µ:**\n"
                "- **Windows/macOS:** –ö–∞—á–∞–µ—à—å —Å [–æ—Ñ.—Å–∞–π—Ç–∞](https://www.wireguard.com/install/) (–Ω–µ—Ç, —Ç–æ—Ä—Ä–µ–Ω—Ç—ã ‚Äî –Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ—Ñ—Ç–∞, –∞ —Ä–∞—Å—Å–∞–¥–Ω–∏–∫ –≤–∏—Ä—É—Å–æ–≤, –∫—Ä–µ—Ç–∏–Ω).\n\n"
                
                "---\n\n"
                
                "**üîπ –®–∞–≥ 4: –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–∞, —ç—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é, —Ç—É–ø–µ–Ω—å–∫–∏–π)**\n"
                "**üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:**\n"
                "1. –û—Ç–∫—Ä—ã–≤–∞–µ—à—å **WireGuard** (–¥–∞, –∏–º–µ–Ω–Ω–æ —Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª, —ë–±–Ω—É—Ç—ã–π).\n"
                "2. –ñ–º—ë—à—å **¬´+¬ª** ‚Üí *¬´–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞¬ª* (–∏–ª–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—à—å QR, –µ—Å–ª–∏ –±–æ—Ç –µ–≥–æ –ø—Ä–∏—Å–ª–∞–ª).\n"
                "3. –í—ã–±–∏—Ä–∞–µ—à—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π `.conf` —Ñ–∞–π–ª (–Ω–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–æ—Ç, –≥–¥–µ —Ç—ã —Ö—Ä–∞–Ω–∏—à—å —Å–≤–æ–∏ –∫—Ä–∏–ø—Ç–æ-–º–µ—á—Ç—ã).\n"
                "4. **–ì–æ—Ç–æ–≤–æ.** –¢–µ–ø–µ—Ä—å –æ–Ω –≤ —Å–ø–∏—Å–∫–µ (–Ω–µ—Ç, –æ–Ω –Ω–µ ¬´—Å–∞–º –¥–æ–±–∞–≤–∏—Ç—Å—è¬ª, –∫–∞–∫ —Ç–≤–æ–∏ –º–æ–∑–≥–∏ –Ω–µ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è).\n\n"
                
                "**üíª –ù–∞ –∫–æ–º–ø–µ:**\n"
                "- **Windows/macOS:**\n"
                "  - –û—Ç–∫—Ä—ã–≤–∞–µ—à—å WireGuard ‚Üí *¬´–ò–º–ø–æ—Ä—Ç —Ç—É–Ω–Ω–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞¬ª* ‚Üí –≤—ã–±–∏—Ä–∞–µ—à—å `.conf` (–Ω–µ—Ç, —ç—Ç–æ –Ω–µ ¬´–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏¬ª, —Ç—É–ø–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).\n\n"
                
                "---\n\n"
                
                "**üîπ –®–∞–≥ 5: –ê–∫—Ç–∏–≤–∞—Ü–∏—è VPN (–Ω–µ—Ç, —ç—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Å–∞–º–æ, –¥–µ–±–∏–ª)**\n"
                "**üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:**\n"
                "- **–í–∫–ª—é—á–∏—Ç—å:** –¢—ã–∫–∞–µ—à—å –ø–æ —Ç—É–Ω–Ω–µ–ª—é ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—à—å **–ø–æ–ª–∑—É–Ω–æ–∫ –≤ ON** (–¥–∞, –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤).\n"
                "- **–í—ã–∫–ª—é—á–∏—Ç—å:** –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—à—å –ø–æ–ª–∑—É–Ω–æ–∫ –≤ **OFF** (–Ω–µ—Ç, VPN –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ –º–∞–Ω–æ–≤–µ–Ω–∏—é –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–∏, –¥–æ–ª–±–æ—ë–±).\n\n"
                
                "**üíª –ù–∞ –∫–æ–º–ø–µ:**\n"
                "- **Windows/macOS:**\n"
                "  - –í—ã–±–∏—Ä–∞–µ—à—å —Ç—É–Ω–Ω–µ–ª—å ‚Üí –∂–º—ë—à—å **¬´Activate¬ª** (–≤–∫–ª—é—á–∏—Ç—å) –∏–ª–∏ **¬´Deactivate¬ª** (–≤—ã–∫–ª—é—á–∏—Ç—å).\n\n"
                
                "---\n\n"
                
                "**üîπ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–æ–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç¬ª, —Ç—ã —Ç—É–ø–æ–π)**\n"
                "1. **–ï—Å–ª–∏ VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
                "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ WireGuard (–≤—ã–∫–ª—é—á–∏ ‚Üí –≤–∫–ª—é—á–∏, –∫–∞–∫ —Ç–≤–æ–π –¥–µ–≥—Ä–∞–¥–∏—Ä—É—é—â–∏–π –º–æ–∑–≥).\n"
                "   - –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ **–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π** (–Ω–µ—Ç, –µ—Å–ª–∏ —Ç—ã –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª ¬´–Ω–∞ –≥–ª–∞–∑¬ª, —Ç–æ —Ç—ã –∏–¥–∏–æ—Ç).\n"
                "   - –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –µ—Å—Ç—å (–¥–∞, VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞–∫—É—É–º–µ, –∫—Ä–µ—Ç–∏–Ω).\n\n"
                
                "2. **–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ VPN —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
                "   - –ó–∞–π–¥–∏ –Ω–∞ [2ip.ru](https://2ip.ru) ‚Äî –µ—Å–ª–∏ IP –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–Ω–∞—á–∏—Ç, —Ç—ã –Ω–µ —Å–æ–≤—Å–µ–º –±–µ–∑–Ω–∞–¥—ë–∂–µ–Ω.\n\n"
                
                "3. **–ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –ø–æ—Ç–µ—Ä—è–ª:**\n"
                "   - –ü–∏—à–µ—à—å –±–æ—Ç—É *¬´–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏¬ª* ‚Üí –æ–Ω –ø—Ä–∏—à–ª—ë—Ç –Ω–æ–≤—ã–π (–Ω–µ—Ç, —ç—Ç–æ –Ω–µ ¬´–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏¬ª, —Ç—É–ø–æ–π).\n\n"
                
                "---\n\n"
                
                "**üíÄ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:**\n"
                "–ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤ VPN **–≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç** ‚Äî –∑–Ω–∞—á–∏—Ç, —Ç—ã –ª–∏–±–æ –∫—Ä–∏–≤–æ—Ä—É–∫, –ª–∏–±–æ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ —Ç—É–ø. –ü–µ—Ä–µ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é **–µ—â—ë —Ä–∞–∑** (–Ω–µ—Ç, ¬´—è –≤—Å—ë —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ¬ª ‚Äî —ç—Ç–æ –ª–æ–∂—å, –∫–∞–∫ –∏ —Ç–≤–æ–∏ –Ω–∞–¥–µ–∂–¥—ã –Ω–∞ —Å–≤–µ—Ç–ª–æ–µ –±—É–¥—É—â–µ–µ).\n\n"
                
                "**üî• –¢–µ–ø–µ—Ä—å —Ç—ã –≤ VPN. –ú–æ–∂–µ—à—å –≤—ã–¥–æ—Ö–Ω—É—Ç—å, —Ö–æ—Ç—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —á—Ç–æ-—Ç–æ –∑–∞–ø–æ—Ä–æ–ª.**",
                parse_mode="Markdown"
            )

    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n"
            f"–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–º.\n\n"
            f"üë®‚Äçüíª –ö–æ–Ω—Ç–∞–∫—Ç—ã: @Youpulo\n\n"
            f"–û—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–æ, –¥–∞–∂–µ –Ω–æ—á—å—é. –¢–æ–ª—å–∫–æ –Ω–µ —Ç—É–ø–∏, —Å—Ä–∞–∑—É –ø–∏—à–∏ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–≤–æ–π ID: <code>{user.id}</code>",
            parse_mode="HTML"
        )

async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    if user.id not in ADMIN_IDS:
        return await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    data = query.data
    if data == "admin_stats":
        ids = db_users_stat()
        return await query.edit_message_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ids)}; ID: {', '.join(map(str, ids))}")
    if data == "admin_requests":
        rows = db_get_pending_payments()
        if not rows:
            return await query.edit_message_text("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç")
        text = "".join(f"ID {pid} –æ—Ç {uid}: {amt} USDT\n" for pid, uid, amt in rows)
        return await query.edit_message_text(text)
    if data.startswith("approve_"):
        pid = int(data.split("_")[1])
        pay = db_get_payment(pid)
        if not pay:
            return await query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫—É")
        uid, _ = pay
        name = f"sub_{pid}"
        priv, pub = generate_keys()
        octet, end, _ = db_sub_add(
            user_id=uid,
            config_name=name,
            public_key=pub,
            private_key=priv,
            days=30
        )
        try:
            add_peer_to_wg(pub, octet)
            subprocess.run(["docker", "exec", "wg-easy", "wg-quick", "save", "wg0"], check=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {str(e)}")
            return
        
        try:
            conf = generate_client_config(priv, octet)
            cfile = f"{user.id}_{name}.conf"
            
            with open(cfile, "w", encoding='utf-8') as f:
                f.write(conf)
            
            with open(cfile, "rb") as f:
                await context.bot.send_document(
                    chat_id=uid,
                    document=InputFile(f, filename=f"wg_{name}.conf"),
                    caption=f"–ö–æ–Ω—Ñ–∏–≥ –¥–æ {end}"
                )
            
            qfile = f"{user.id}_{name}.png"
            generate_qr(conf, qfile)
            
            if os.path.exists(qfile):
                with open(qfile, "rb") as f:
                    await context.bot.send_photo(
                        chat_id=uid,
                        photo=InputFile(f, filename=f"wg_{name}.png"),
                        caption="QR-–∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"
                    )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await context.bot.send_message(
                chat_id=user.id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )
        finally:
            for f in [cfile, qfile]:
                if os.path.exists(f):
                    os.remove(f)
        
        db_payment_set_status(pid, "confirmed", name)
        return await query.edit_message_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: –∫–æ–Ω—Ñ–∏–≥ –≤—ã–¥–∞–Ω ID {pid}")

def db_users_stat():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id FROM users")
    ids = [r[0] for r in c.fetchall()]
    conn.close()
    return ids

def peer_watcher():
    while True:
        for pub in db_get_expired_peers():
            try:
                remove_peer_from_wg(pub)
            except:
                pass
        active = db_get_active_peers()
        peers = subprocess.getoutput(f"docker exec wg-easy wg show {WG_INTERFACE} peers")
        for pub in active:
            if pub not in peers:
                try:
                    peer_data = db_get_peer_by_public_key(pub)
                    if peer_data:
                        _, _, octet, _, _,
                        add_peer_to_wg(pub, octet)
                except:
                    pass
        time.sleep(1800)

if __name__ == "__main__":
    db_init()
    Thread(target=peer_watcher, daemon=True).start()
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(CallbackQueryHandler(admin_callbacks))
    app.run_polling()
