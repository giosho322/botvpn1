import os
import sqlite3
import datetime
import logging
import subprocess
import qrcode
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    Application, ContextTypes, MessageHandler, CallbackQueryHandler, filters
)
from threading import Thread
import time

DB = "autowgshop.db"
ADMIN_IDS = [1203425573]  # <-- —Ç–≤–æ–π Telegram ID
CRYPTO_WALLET = "12313"
PRICE = 5  # USDT
WG_CONF = "/root/.wg-easy/wg0.conf"
WG_INTERFACE = "wg0"
WG_SUBNET = "10.8.0"
SERVER_PUBLIC_KEY = "hRVLkkxJNDpYGiGdmg/YRFOAVPrwJMj9zHZeb1l9aQU="
SERVER_ENDPOINT = "80.74.28.21:51820"

logging.basicConfig(level=logging.INFO)

def db_init():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        is_admin INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS subs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        config_name TEXT,
        ip_last_octet INTEGER,
        start_date DATE,
        end_date DATE,
        public_key TEXT,
        private_key TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        wallet TEXT,
        amount REAL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT,
        config_name TEXT
    )''')
    conn.commit()
    conn.close()

def db_user_add(user_id, username, is_admin=False):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (id, username, is_admin) VALUES (?, ?, ?)", (user_id, username, int(is_admin)))
    conn.commit()
    conn.close()

def db_payment_add(user_id, wallet, amount):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("INSERT INTO payments (user_id, wallet, amount, status) VALUES (?, ?, ?, 'pending')", (user_id, wallet, amount))
    payment_id = c.lastrowid
    conn.commit()
    conn.close()
    return payment_id

def db_payment_set_status(payment_id, status, config_name=None):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    if config_name:
        c.execute("UPDATE payments SET status=?, config_name=? WHERE id=?", (status, config_name, payment_id))
    else:
        c.execute("UPDATE payments SET status=? WHERE id=?", (status, payment_id))
    conn.commit()
    conn.close()

def db_get_pending_payments():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id, user_id, amount FROM payments WHERE status='pending'")
    rows = c.fetchall()
    conn.close()
    return rows

def db_get_payment(payment_id):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT user_id, amount FROM payments WHERE id=?", (payment_id,))
    row = c.fetchone()
    conn.close()
    return row

def db_sub_add(user_id, config_name, public_key, private_key, days=30):
    now = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç peer (—á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ IP)
    c.execute("SELECT id, ip_last_octet, end_date FROM subs WHERE user_id=? AND config_name=?", (user_id, config_name))
    row = c.fetchone()
    if row:
        sub_id, ip_octet, prev_end_date = row
        prev_end = datetime.datetime.strptime(prev_end_date, "%Y-%m-%d").date() if prev_end_date else now
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –∫–æ–Ω—Ü–∞, –∏–Ω–∞—á–µ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        start_from = max(now, prev_end)
        end_date = start_from + datetime.timedelta(days=days)
        c.execute("UPDATE subs SET end_date=? WHERE id=?", (end_date, sub_id))
        conn.commit()
        conn.close()
        return ip_octet, end_date, False
    # –ù–æ–≤—ã–π peer
    c.execute("SELECT MAX(ip_last_octet) FROM subs")
    row = c.fetchone()
    last = row[0] if row and row[0] else 1
    ip_octet = last + 1
    end_date = now + datetime.timedelta(days=days)
    c.execute(
        "INSERT INTO subs (user_id, config_name, ip_last_octet, start_date, end_date, public_key, private_key) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user_id, config_name, ip_octet, now, end_date, public_key, private_key)
    )
    conn.commit()
    conn.close()
    return ip_octet, end_date, True

def db_user_configs(user_id):
    now = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT config_name, ip_last_octet, end_date, private_key FROM subs WHERE user_id=? AND end_date>=?", (user_id, now))
    rows = c.fetchall()
    conn.close()
    return rows

def db_get_sub_by_config(config_name):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT public_key, ip_last_octet FROM subs WHERE config_name=?", (config_name,))
    row = c.fetchone()
    conn.close()
    return row

def db_get_expired_peers():
    today = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT public_key FROM subs WHERE end_date < ?", (today,))
    rows = c.fetchall()
    conn.close()
    return [r[0] for r in rows]

def db_get_active_peers():
    today = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT public_key FROM subs WHERE end_date >= ?", (today,))
    rows = c.fetchall()
    conn.close()
    return [r[0] for r in rows]

def db_get_peer_by_public_key(public_key):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT user_id, config_name, ip_last_octet, end_date, private_key FROM subs WHERE public_key=?", (public_key,))
    row = c.fetchone()
    conn.close()
    return row

def generate_keys():
    private_key = subprocess.getoutput("wg genkey")
    public_key = subprocess.getoutput(f"echo '{private_key}' | wg pubkey")
    return private_key, public_key

def add_peer_to_wg(public_key, ip_octet):
   cmd = [
    "docker", "exec", "wg-easy", "wg", "set", WG_INTERFACE,
    "peer", public_key,
    "allowed-ips", f"{WG_SUBNET}.{ip_octet}/32"
]
subprocess.run(cmd, check=True)

def remove_peer_from_wg(public_key):
    cmd = [
        "docker", "exec", "wg-easy", "wg", "set", WG_INTERFACE,
        "peer", public_key, "remove"
    ]
subprocess.run(cmd, check=True)

def generate_client_config(private_key, ip_octet):
    return f"""[Interface]
PrivateKey = {private_key}
Address = {WG_SUBNET}.{ip_octet}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_ENDPOINT}
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
"""

def generate_qr(config_text, path):
    img = qrcode.make(config_text)
    img.save(path)

def get_main_keyboard(user_id):
    kb = [
        [KeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton("üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏")],
        [KeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    if user_id in ADMIN_IDS:
        kb.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user_add(user.id, user.username)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Shop!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(user.id)
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user_add(user.id, user.username)
    text = update.message.text
    if text == "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        payment_id = db_payment_add(user.id, CRYPTO_WALLET, PRICE)
        for admin in ADMIN_IDS:
            await context.bot.send_message(
                admin,
                f"–ó–∞—è–≤–∫–∞ #{payment_id} –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç @{user.username} (id {user.id}) –Ω–∞ {PRICE} USDT.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∏ –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"approve_{payment_id}")]
                ])
            )
        await update.message.reply_text(
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{PRICE} USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>{CRYPTO_WALLET}</code>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
    elif text == "üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏":
        configs = db_user_configs(user.id)
        if not configs:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!", reply_markup=get_main_keyboard(user.id))
            return
        for config_name, ip_octet, end_date, private_key in configs:
            conf = generate_client_config(private_key, ip_octet)
            conf_path = f"{user.id}_{config_name}.conf"
            qr_path = f"{user.id}_{config_name}.png"
            with open(conf_path, "w") as f:
                f.write(conf)
            generate_qr(conf, qr_path)
            await update.message.reply_document(document=InputFile(conf_path), caption=f"–ö–æ–Ω—Ñ–∏–≥: {config_name}\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {end_date}")
            await update.message.reply_photo(photo=InputFile(qr_path), caption="QR-–∫–æ–¥ –¥–ª—è WireGuard")
            os.remove(conf_path)
            os.remove(qr_path)
    elif text == "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await update.message.reply_text(
            "1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –Ω–∞ –ü–ö –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ WireGuard).\n"
            "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
            "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å VPN.\n"
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text("–ü–∏—à–∏—Ç–µ —Å—é–¥–∞: @Youpulo")
    elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user.id in ADMIN_IDS:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞—è–≤–∫–∏", callback_data="admin_requests")],
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ])
        await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard(user.id))

async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    if user.id not in ADMIN_IDS:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    data = query.data
    if data == "admin_stats":
        ids = db_users_stat()
        await query.edit_message_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ids)}\nID: " + ", ".join(str(i) for i in ids))
    elif data == "admin_requests":
        rows = db_get_pending_payments()
        if not rows:
            await query.edit_message_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
            return
        text = "–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n"
        for pid, uid, amount in rows:
            text += f"ID: {pid}, user: {uid}, —Å—É–º–º–∞: {amount} USDT\n"
        await query.edit_message_text(text)
    elif data.startswith("approve_"):
        payment_id = int(data.split("_")[1])
        payment = db_get_payment(payment_id)
        if not payment:
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        user_id, amount = payment
        config_name = f"sub_{payment_id}"
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
        private_key, public_key = generate_keys()
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É + –≤—ã–¥–∞—ë–º IP (–µ—Å–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ)
        ip_octet, end_date, is_new = db_sub_add(user_id, config_name, public_key, private_key)
        # 3. –î–æ–±–∞–≤–ª—è–µ–º peer –≤ WG (–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ)
        try:
            add_peer_to_wg(public_key, ip_octet)
        except Exception as e:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è peer –≤ WG: " + str(e))
            return
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º
        conf = generate_client_config(private_key, ip_octet)
        conf_path = f"{user_id}_{config_name}.conf"
        qr_path = f"{user_id}_{config_name}.png"
        with open(conf_path, "w") as f:
            f.write(conf)
        generate_qr(conf, qr_path)
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ QR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_document(chat_id=user_id, document=InputFile(conf_path),
                                        caption=f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date}.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
        await context.bot.send_photo(chat_id=user_id, photo=InputFile(qr_path), caption="QR-–∫–æ–¥ –¥–ª—è WireGuard")
        os.remove(conf_path)
        os.remove(qr_path)
        db_payment_set_status(payment_id, "confirmed", config_name)
        await query.edit_message_text(f"–ö–æ–Ω—Ñ–∏–≥ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –∑–∞—è–≤–∫–∞ {payment_id} –∑–∞–∫—Ä—ã—Ç–∞.")
        await context.bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await query.answer()

def db_users_stat():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id FROM users")
    ids = [row[0] for row in c.fetchall()]
    conn.close()
    return ids

def peer_watcher():
    while True:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö peer
        expired = db_get_expired_peers()
        for pubkey in expired:
            try:
                remove_peer_from_wg(pubkey)
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è peer {pubkey}: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º peer —Ç–µ–º, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è)
        active = db_get_active_peers()
        for pubkey in active:
            peer = db_get_peer_by_public_key(pubkey)
            if not peer:
                continue
            _, _, ip_octet, end_date, _ = peer
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ peer –≤ —Ç–µ–∫—É—â–µ–º –≤—ã–≤–æ–¥–µ wg show
            peers_output = subprocess.getoutput(f"docker exec wg-easy wg show {WG_INTERFACE} peers")
            if pubkey not in peers_output:
                try:
                    add_peer_to_wg(pubkey, ip_octet)
                except Exception as e:
                    logging.info(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è peer {pubkey}: {e}")
        time.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

def main():
    db_init()
    # watcher –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=peer_watcher, daemon=True).start()
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(CallbackQueryHandler(admin_callbacks))
    app.run_polling()

if __name__ == "__main__":
    main()
