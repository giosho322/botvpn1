import os
import sqlite3
import datetime
import logging
import subprocess
import qrcode
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    Application, ContextTypes, MessageHandler, CallbackQueryHandler, CommandHandler, filters
)
from threading import Thread
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB = "autowgshop.db"
ADMIN_IDS = [1203425573]  # <-- —Ç–≤–æ–π Telegram ID
CRYPTO_WALLET = "TNDYy3v4a5b6c7d8e9f0g1h2i3j4k5l6m"  # –¢–≤–æ–π TRON-–∞–¥—Ä–µ—Å
PRICE = 5  # USDT
WG_CONF = "/etc/wireguard/wg0.conf"
WG_INTERFACE = "wg0"
WG_SUBNET = "100.64.0"
SERVER_PUBLIC_KEY = "hRVLkkxJNDpYGiGdmg/YRFOAVPrwJMj9zHZeb1l9aQU="
SERVER_ENDPOINT = "80.74.28.21:51820"

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
def db_init():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        is_admin INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS subs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        config_name TEXT,
        ip_last_octet INTEGER,
        start_date DATE,
        end_date DATE,
        public_key TEXT,
        private_key TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        wallet TEXT,
        amount REAL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT,
        config_name TEXT
    )''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
...  # –∑–¥–µ—Å—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

def generate_keys():
    private_key = subprocess.getoutput("wg genkey")
    public_key = subprocess.getoutput(f"echo '{private_key}' | wg pubkey")
    return private_key, public_key

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ä–æ–≤
...  # add_peer_to_wg –∏ remove_peer_from_wg –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∏ QR
...  # generate_client_config –∏ generate_qr –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id):
    kb = [
        [KeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton("üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏")],
        [KeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    if user_id in ADMIN_IDS:
        kb.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user_add(user.id, user.username)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Shop!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(user.id)
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ handle_menu...
    pass

async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ª–æ–≥–∏–∫–∞ admin_callbacks...
    pass

# –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø–∏—Ä–∞–º–∏
def peer_watcher():
    while True:
        # –ª–æ–≥–∏–∫–∞ peer_watcher...
        time.sleep(1800)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    db_init()
    Thread(target=peer_watcher, daemon=True).start()
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    # –î–æ–±–∞–≤–ª—è–µ–º handler –¥–ª—è /start
    app.add_handler(CommandHandler("start", start))
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ handlers
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(CallbackQueryHandler(admin_callbacks))
    app.run_polling()
