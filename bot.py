import os
import sqlite3
import datetime
import logging
import subprocess
import qrcode
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    Application, ContextTypes, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters
)
from threading import Thread
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB = "autowgshop.db"
ADMIN_IDS = [1203425573]
CRYPTO_WALLET = "TNDYy3v4a5b6c7d8e9f0g1h2i3j4k5l6m"
PRICE = 5
WG_INTERFACE = "wg0"
WG_SUBNET = "100.64.0"
SERVER_PUBLIC_KEY = "hRVLkkxJNDpYGiGdmg/YRFOAVPrwJMj9zHZeb1l9aQU="
SERVER_ENDPOINT = "80.74.28.21:51820"

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
def db_init():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        is_admin INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS subs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        config_name TEXT,
        ip_last_octet INTEGER,
        start_date DATE,
        end_date DATE,
        public_key TEXT,
        private_key TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        wallet TEXT,
        amount REAL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT,
        config_name TEXT
    )''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def db_user_add(user_id, username, is_admin=False):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (id, username, is_admin) VALUES (?, ?, ?)",
              (user_id, username, int(is_admin)))
    conn.commit()
    conn.close()

def db_payment_add(user_id, wallet, amount):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("INSERT INTO payments (user_id, wallet, amount, status) VALUES (?, ?, ?, 'pending')",
              (user_id, wallet, amount))
    pid = c.lastrowid
    conn.commit()
    conn.close()
    return pid

def db_payment_set_status(payment_id, status, config_name=None):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    if config_name:
        c.execute("UPDATE payments SET status=?, config_name=? WHERE id=?",
                  (status, config_name, payment_id))
    else:
        c.execute("UPDATE payments SET status=? WHERE id=?", (status, payment_id))
    conn.commit()
    conn.close()

def db_get_pending_payments():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id, user_id, amount FROM payments WHERE status='pending'")
    rows = c.fetchall()
    conn.close()
    return rows

def db_get_payment(payment_id):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT user_id, amount FROM payments WHERE id=?", (payment_id,))
    row = c.fetchone()
    conn.close()
    return row

def db_sub_add(user_id, config_name, public_key, private_key, days=30):
    now = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id, ip_last_octet, end_date FROM subs WHERE user_id=? AND config_name=?",
              (user_id, config_name))
    row = c.fetchone()
    if row:
        sid, octet, prev = row
        prev_date = datetime.datetime.strptime(prev, "%Y-%m-%d").date() if prev else now
        start = max(now, prev_date)
        end = start + datetime.timedelta(days=days)
        c.execute("UPDATE subs SET end_date=? WHERE id=?", (end, sid))
        conn.commit()
        conn.close()
        return octet, end, False
    c.execute("SELECT MAX(ip_last_octet) FROM subs")
    last = c.fetchone()[0] or 1
    octet = last + 1
    end = now + datetime.timedelta(days=days)
    c.execute(
        "INSERT INTO subs (user_id, config_name, ip_last_octet, start_date, end_date, public_key, private_key) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user_id, config_name, octet, now, end, public_key, private_key)
    )
    conn.commit()
    conn.close()
    return octet, end, True

def db_user_configs(user_id):
    today = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT config_name, ip_last_octet, end_date, private_key FROM subs WHERE user_id=? AND end_date>=?",
              (user_id, today))
    rows = c.fetchall()
    conn.close()
    return rows

def db_get_peer_by_public_key(public_key):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT user_id, config_name, ip_last_octet, end_date, private_key FROM subs WHERE public_key=?",
              (public_key,))
    row = c.fetchone()
    conn.close()
    return row

def db_get_expired_peers():
    today = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT public_key FROM subs WHERE end_date < ?", (today,))
    keys = [r[0] for r in c.fetchall()]
    conn.close()
    return keys

def db_get_active_peers():
    today = datetime.date.today()
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT public_key FROM subs WHERE end_date >= ?", (today,))
    keys = [r[0] for r in c.fetchall()]
    conn.close()
    return keys

def generate_keys():
    priv = subprocess.getoutput("wg genkey")
    pub = subprocess.getoutput(f"echo '{priv}' | wg pubkey")
    return priv, pub

def add_peer_to_wg(public_key, ip_octet):
    cmd = ["docker", "exec", "wg-easy", "wg", "set", WG_INTERFACE,
           "peer", public_key, "allowed-ips", f"{WG_SUBNET}.{ip_octet}/32"]
    subprocess.run(cmd, check=True)

def remove_peer_from_wg(public_key):
    cmd = ["docker", "exec", "wg-easy", "wg", "set", WG_INTERFACE,
           "peer", public_key, "remove"]
    subprocess.run(cmd, check=True)

def generate_client_config(priv, octet):
    return f"""[Interface]\nPrivateKey = {priv}\nAddress = {WG_SUBNET}.{octet}/24\nDNS = 1.1.1.1\n\n[Peer]\nPublicKey = {SERVER_PUBLIC_KEY}\nEndpoint = {SERVER_ENDPOINT}\nAllowedIPs = 0.0.0.0/0\nPersistentKeepalive = 25\n"""

def generate_qr(text, path):
    qrcode.make(text).save(path)

def get_main_keyboard(user_id):
    kb = [[KeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton("üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏")],
          [KeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]]
    if user_id in ADMIN_IDS:
        kb.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user_add(user.id, user.username)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Shop!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(user.id)
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    db_user_add(user.id, user.username)

    if text == "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        pid = db_payment_add(user.id, CRYPTO_WALLET, PRICE)
        for admin in ADMIN_IDS:
            await context.bot.send_message(
                admin,
                f"–ó–∞—è–≤–∫–∞ #{pid} –æ—Ç @{user.username} ({user.id}) –Ω–∞ {PRICE} USDT",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∏ –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"approve_{pid}")]]
                )
            )
        await update.message.reply_text(
            f"–ü–µ—Ä–µ–≤–µ–¥–∏ <b>{PRICE} USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>{CRYPTO_WALLET}</code>\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode="HTML"
        )

    elif text == "üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏":
    configs = db_user_configs(user.id)
    if not configs:
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤.", reply_markup=get_main_keyboard(user.id))
    for name, octet, end, priv in configs:
        conf = generate_client_config(priv, octet)
        cfile = f"{user.id}_{name}.conf"
        qfile = f"{user.id}_{name}.png"
        with open(cfile, "w") as f: f.write(conf)
        generate_qr(conf, qfile)
        await context.bot.send_document(user.id, InputFile(cfile), caption=f"{name} –¥–æ {end}")
        await context.bot.send_photo(user.id, InputFile(qfile), caption="QR-–∫–æ–¥")
        os.remove(cfile)
        os.remove(qfile)


    elif text == "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await update.message.reply_text(
            f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:\n\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard:\n"
            "‚Ä¢ –ù–∞ –ü–ö ‚Äî —Å–∫–∞—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç: https://www.wireguard.com/install/\n"
            "‚Ä¢ –ù–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞:\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üìÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏¬ª –∏ —Å–∫–∞—á–∞–π—Ç–µ .conf –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.\n\n"
            "3Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞:\n"
            "‚Ä¢ –í –∫–ª–∏–µ–Ω—Ç–µ WireGuard –≤—ã–±–µ—Ä–∏—Ç–µ ¬´Import from file¬ª –∏–ª–∏ ¬´+ ‚Üí Create from QR code¬ª.\n\n"
            "4Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç–∞—Ç—É—Å–∞ Active.\n\n"
            "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ IP:\n"
            "‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://ipleak.net/ ‚Äî –≤–∞—à IP –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 10.\n\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Youpulo"
        )

    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n"
            f"–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–º.\n\n"
            f"üë®‚Äçüíª –ö–æ–Ω—Ç–∞–∫—Ç—ã: @Youpulo\n\n"
            f"–û—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–æ, –¥–∞–∂–µ –Ω–æ—á—å—é. –¢–æ–ª—å–∫–æ –Ω–µ —Ç—É–ø–∏, —Å—Ä–∞–∑—É –ø–∏—à–∏ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–≤–æ–π ID: <code>{user.id}</code>",
            parse_mode="HTML"
        )

async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    if user.id not in ADMIN_IDS:
        return await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    data = query.data
    if data == "admin_stats":
        ids = db_users_stat()
        return await query.edit_message_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ids)}; ID: {', '.join(map(str, ids))}")
    if data == "admin_requests":
        rows = db_get_pending_payments()
        if not rows:
            return await query.edit_message_text("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç")
        text = "".join(f"ID {pid} –æ—Ç {uid}: {amt} USDT\n" for pid, uid, amt in rows)
        return await query.edit_message_text(text)
    if data.startswith("approve_"):
        pid = int(data.split("_")[1])
        pay = db_get_payment(pid)
        if not pay:
            return await query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫—É")
        uid, _ = pay
        name = f"sub_{pid}"
        priv, pub = generate_keys()
        octet, end, _ = db_sub_add(uid, name, pub, priv)
        try:
            add_peer_to_wg(pub, octet)
        except Exception as e:
            return await query.edit_message_text(f"–û—à–∏–±–∫–∞ WG: {e}")
        conf = generate_client_config(priv, octet)
        cfile = f"{uid}_{name}.conf"
        qfile = f"{uid}_{name}.png"
        with open(cfile, "w") as f: f.write(conf)
        generate_qr(conf, qfile)
        await context.bot.send_document(user.id, InputFile(cfile), caption=f"{name} –¥–æ {end}")
        await context.bot.send_photo(user.id, InputFile(qfile), caption="QR-–∫–æ–¥")
        os.remove(cfile)
        os.remove(qfile)
        db_payment_set_status(pid, "confirmed", name)
        return await query.edit_message_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: –∫–æ–Ω—Ñ–∏–≥ –≤—ã–¥–∞–Ω ID {pid}")

def db_users_stat():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id FROM users")
    ids = [r[0] for r in c.fetchall()]
    conn.close()
    return ids

def peer_watcher():
    while True:
        for pub in db_get_expired_peers():
            try:
                remove_peer_from_wg(pub)
            except:
                pass
        active = db_get_active_peers()
        peers = subprocess.getoutput(f"docker exec wg-easy wg show {WG_INTERFACE} peers")
        for pub in active:
            if pub not in peers:
                try:
                    _, _, octet, _, _ = db_get_peer_by_public_key(pub)
                    add_peer_to_wg(pub, octet)
                except:
                    pass
        time.sleep(1800)

if __name__ == "__main__":
    db_init()
    Thread(target=peer_watcher, daemon=True).start()
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(CallbackQueryHandler(admin_callbacks))
    app.run_polling()
